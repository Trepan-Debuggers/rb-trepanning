Overall Debugger Command Syntax
-------------------------------

If the first non-blank character of a line starts with `#`,
the command is ignored.

If a line starts with `!` in column one, the line is *eval*'d.

If the command you want Ruby to eval starts with `!`, add that
after the first `!` or start the line with a space.

Commands are split at whereever `;;` appears. This process disregards
any quotes or other symbols that have meaning in Ruby. The strings
after the leading command string are put back on a command queue.

Within a single command, tokens are then white-space split. Again,
this process disregards quotes or symbols that have meaning in Ruby.
Some commands like `eval`, `macro`, and `break` have access to the
untokenized string entered and make use of that rather than the
tokenized list.

Resolving a command name involves possibly 4 steps. Some steps may be
omitted depending on early success or some debugger settings:

1. The leading token is first looked up in the macro table. If it is in
the table, the expansion is replaces the current command and possibly
other commands pushed onto a command queue. See the "help macros" for
help on how to define macros, and `info macro` for current macro
definitions.

2. The leading token is next looked up in the debugger alias table and
the name may be substituted there. See "help alias" for how to define
aliases, and "show alias" for the current list of aliases.

3. After the above, The leading token is looked up a table of debugger
commands. If an exact match is found, the command name and arguments
are dispatched to that command. Otherwise, we may check to see the the
token is a unique prefix of a valid command. For example, "dis" is not
a unique prefix because there are both "display" and "disable"
commands, but "disp" is a unique prefix. You can allow or disallow
abbreviations for commands using `set abbrev`. The default puts
abbreviations on.

4. If after all of the above, we still don't find a command, the line
may be evaluated as a Ruby statement in the current context of the
program at the point it is stoppped. However this is done only if
`autoeval` is on.  It is on by default.

If `auto eval` is not set on, or if running the Ruby statement
produces an error, we display an error message that the entered string
is "undefined".

If you want irb-like command-processing, it's possible to go into an
irb shell with the "irb" command. It is also possible to arrange going
into an irb shell every time you enter the debugger.

**See also:**

"help syntax examples", "help syntax suffix"
